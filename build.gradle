
//apply plugin: "asset-pipeline"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'maven'
apply plugin: 'com.bmuschko.tomcat'
//apply plugin: 'com.moowork.node'



buildscript {

    repositories {
        maven { url "http://repo.spring.io/libs-release" }
	/*    maven {
	      	url "https://plugins.gradle.org/m2/"
	    }
	    */
        mavenLocal()
        mavenCentral()
    }
  
	
    dependencies {
	  classpath 'com.bmuschko:gradle-tomcat-plugin:2.2'	  
	  classpath 'com.moowork.gradle:gradle-node-plugin:0.10'	 
	  classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:2.3.7' 
	}
	
 
}

apply plugin: 'com.moowork.node'
apply plugin: 'asset-pipeline'

assets {
  minifyJs = true
  minifyCss = true
  //enableSourceMaps = true
   enableSourceMaps = false
  configOptions = [:]

  minifyOptions = [
    languageMode: 'ES5',
    targetLanguage: 'ES5', //Can go from ES6 to ES5 for those bleeding edgers
    optimizationLevel: 'SIMPLE',
    angularPass: true // Can use @ngInject annotation for Angular Apps
  ]

  includes = []
  excludes = ['**/*.less'] //Example Exclude GLOB pattern
}
//mainClassName = "org.springframework.batch.core.launch.support.CommandLineJobRunner job-read-files.xml mongo-ebook_batch"

jar {
    baseName = 'gs-accessing-data-mongodb'
    version =  '0.1.0'
}

node {
    version = '0.12.5'
    npmVersion = '2.11.2'
    download = true
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spring.io/libs-release" }
}

task npmCacheConfig(type: NpmTask) {
    description = "Configure the NPM cache"
    def npmCacheDir = "${gradle.getGradleUserHomeDir()}/caches/npm"
    outputs.files file(npmCacheDir)
    args = [ 'config', 'set', 'cache', npmCacheDir ]
}

task npmPackages(type: NpmTask, dependsOn: npmCacheConfig) {
    description = "Install Node.js packages"
    args = [ 'install' ]
    inputs.files file('package.json')
    outputs.files file('node_modules')
}

task bowerInstall(type: NodeTask) {
    script = file('node_modules/bower/bin/bower')
    args = ["--config.storage.cache=${gradle.getGradleUserHomeDir()}/caches/bower/cache",
            "--config.storage.packages=${gradle.getGradleUserHomeDir()}/caches/bower/packages",
            "--config.storage.registry=${gradle.getGradleUserHomeDir()}/caches/bower/registry",
            'install']
    inputs.files file('bower.json')
    outputs.files file('bower_components')
    dependsOn npmPackages
}

task bowerSyncJavascript(type: Sync) {
    from 'bower_components'
    into "src/main/assets/javascripts/bower_components"
    exclude '**/*.min.js'
    exclude '**/angular*/index.js'
    exclude '**/angular*/ng*.js'
    include 'jquery/dist/jquery.js'
    include 'angular*/**/*.js'
    dependsOn bowerInstall
}

task bowerSyncStylesheets(type: Sync) {
    from 'bower_components'
    into "src/main/assets/stylesheets/bower_components"
    include 'angular*/**/*.css'
    include 'animate.css/animate.css'
    dependsOn bowerInstall
}

task bowerPackages() {
    dependsOn bowerSyncJavascript, bowerSyncStylesheets
}

processResources.dependsOn bowerPackages
assetCompile.dependsOn bowerPackages

dependencies {
	def tomcatVersion = '7.0.59'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
}

dependencies {
  compile 'org.codehaus.groovy:groovy:2.0.7'
  compile 'org.codehaus.groovy:groovy-templates:2.0.7'

	compile 'com.fasterxml.jackson.core:jackson-databind:2.4.0'
	compile 'org.springframework:spring-webmvc:4.1.6.RELEASE'
	compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.springframework.data:spring-data-mongodb:1.7.0.RELEASE'
    compile 'org.springframework:spring-test:4.1.6.RELEASE'
	compile 'org.springframework.batch:spring-batch-core:3.0.4.RELEASE'
	compile 'org.springframework:spring-oxm:4.1.6.RELEASE'
	compile 'commons-beanutils:commons-beanutils:1.9.2'
//	compile 'log4j:log4j:1.2.17'
	compile 'org.slf4j:slf4j-log4j12:1.7.12'
	
	
    testCompile 'junit:junit:4.+'
    testCompile 'org.powermock:powermock-api-easymock:1.5.5'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5-rc-1'
}


tomcat {
	httpPort = 8080
	httpsPort = 8091
	enableSSL = true
	
	users {
		user {
			username = 'user1'
			password = '123456'
			roles = ['developers', 'admin']
		}

		user {
			username = 'user2'
			password = 'abcdef'
			roles = ['manager']
		}
	}
}
